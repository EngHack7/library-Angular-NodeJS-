import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { ListBox } from '@syncfusion/ej2-dropdowns';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
* The ListBox allows the user to select values from the predefined list of values.
*```html
*<ejs-listbox [dataSource]='data'></ejs-listbox>
*```
*/
export declare class ListBoxComponent extends ListBox implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    formCompContext: any;
    formContext: any;
    tagObjects: any;
    valueChange: any;
    /**
     * Accepts the template design and assigns it to each list item present in the popup.
     * We have built-in `template engine`
     *
     * which provides options to compile template string into a executable function.
     *For EX: We have expression evolution as like ES6 expression string literals.
     * @default null

     */
    itemTemplate: any;
    focus: any;
    blur: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    registerOnChange(registerFunction: (_: any) => void): void;
    registerOnTouched(registerFunction: () => void): void;
    writeValue(value: any): void;
    setDisabledState(disabled: boolean): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ListBoxComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ListBoxComponent, "ejs-listbox", never, { "actionFailureTemplate": "actionFailureTemplate"; "allowDragAndDrop": "allowDragAndDrop"; "allowFiltering": "allowFiltering"; "cssClass": "cssClass"; "dataSource": "dataSource"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "enabled": "enabled"; "fields": "fields"; "filterBarPlaceholder": "filterBarPlaceholder"; "filterType": "filterType"; "groupTemplate": "groupTemplate"; "height": "height"; "ignoreAccent": "ignoreAccent"; "ignoreCase": "ignoreCase"; "itemTemplate": "itemTemplate"; "locale": "locale"; "maximumSelectionLength": "maximumSelectionLength"; "noRecordsTemplate": "noRecordsTemplate"; "query": "query"; "scope": "scope"; "selectionSettings": "selectionSettings"; "sortOrder": "sortOrder"; "toolbarSettings": "toolbarSettings"; "value": "value"; "zIndex": "zIndex"; }, { "focus": "focus"; "blur": "blur"; "actionBegin": "actionBegin"; "actionComplete": "actionComplete"; "actionFailure": "actionFailure"; "beforeDrop": "beforeDrop"; "beforeItemRender": "beforeItemRender"; "change": "change"; "created": "created"; "dataBound": "dataBound"; "destroyed": "destroyed"; "drag": "drag"; "dragStart": "dragStart"; "drop": "drop"; "filtering": "filtering"; "select": "select"; "valueChange": "valueChange"; }, ["itemTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdGJveC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibGlzdGJveC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBSZW5kZXJlcjIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuaW1wb3J0IHsgTGlzdEJveCB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1kcm9wZG93bnMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgaW5wdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IG91dHB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHdvV2F5czogc3RyaW5nW107XG4vKipcbiogVGhlIExpc3RCb3ggYWxsb3dzIHRoZSB1c2VyIHRvIHNlbGVjdCB2YWx1ZXMgZnJvbSB0aGUgcHJlZGVmaW5lZCBsaXN0IG9mIHZhbHVlcy5cbipgYGBodG1sXG4qPGVqcy1saXN0Ym94IFtkYXRhU291cmNlXT0nZGF0YSc+PC9lanMtbGlzdGJveD5cbipgYGBcbiovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMaXN0Qm94Q29tcG9uZW50IGV4dGVuZHMgTGlzdEJveCBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGZvcm1Db21wQ29udGV4dDogYW55O1xuICAgIGZvcm1Db250ZXh0OiBhbnk7XG4gICAgdGFnT2JqZWN0czogYW55O1xuICAgIHZhbHVlQ2hhbmdlOiBhbnk7XG4gICAgLyoqXG4gICAgICogQWNjZXB0cyB0aGUgdGVtcGxhdGUgZGVzaWduIGFuZCBhc3NpZ25zIGl0IHRvIGVhY2ggbGlzdCBpdGVtIHByZXNlbnQgaW4gdGhlIHBvcHVwLlxuICAgICAqIFdlIGhhdmUgYnVpbHQtaW4gYHRlbXBsYXRlIGVuZ2luZWBcbiAgICAgKlxuICAgICAqIHdoaWNoIHByb3ZpZGVzIG9wdGlvbnMgdG8gY29tcGlsZSB0ZW1wbGF0ZSBzdHJpbmcgaW50byBhIGV4ZWN1dGFibGUgZnVuY3Rpb24uXG4gICAgICpGb3IgRVg6IFdlIGhhdmUgZXhwcmVzc2lvbiBldm9sdXRpb24gYXMgbGlrZSBFUzYgZXhwcmVzc2lvbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuXG4gICAgICovXG4gICAgaXRlbVRlbXBsYXRlOiBhbnk7XG4gICAgZm9jdXM6IGFueTtcbiAgICBibHVyOiBhbnk7XG4gICAgY29uc3RydWN0b3IobmdFbGU6IEVsZW1lbnRSZWYsIHNyZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UocmVnaXN0ZXJGdW5jdGlvbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQocmVnaXN0ZXJGdW5jdGlvbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGRpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJFdmVudHM6IChldmVudExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICAgIGFkZFR3b1dheTogKHByb3BMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbn1cbiJdfQ==