import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { DropDownTree } from '@syncfusion/ej2-dropdowns';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
*The DropDownTree component contains a list of predefined values from which you can choose a single or multiple values.
*```html
*<ejs-dropdowntree></ejs-dropdowntree>
*```
*/
export declare class DropDownTreeComponent extends DropDownTree implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    formCompContext: any;
    formContext: any;
    tagObjects: any;
    valueChange: any;
    /**
     * Specifies the template that renders a customized footer container at the bottom of the pop-up list.
     * By default, the footerTemplate will be null and there will be no footer container for the pop-up list.
     * @default null
     */
    footerTemplate: any;
    /**
     * Specifies the template that renders a customized header container at the top of the pop-up list.
     * By default, the headerTemplate will be null and there will be no header container for the pop-up list.
     * @default null
     */
    headerTemplate: any;
    /**
     * Specifies a template to render customized content for all the items.
     * If the **itemTemplate** property is set, the template content overrides the displayed item text.
     * The property accepts [template string](http://ej2.syncfusion.com/documentation/base/template-engine.html)
     * or HTML element ID holding the content.
     * @default null
     */
    itemTemplate: any;
    noRecordsTemplate: any;
    actionFailureTemplate: any;
    private skipFromEvent;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    registerOnChange(registerFunction: (_: any) => void): void;
    registerOnTouched(registerFunction: () => void): void;
    writeValue(value: any): void;
    setDisabledState(disabled: boolean): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DropDownTreeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DropDownTreeComponent, "ejs-dropdowntree", never, { "actionFailureTemplate": "actionFailureTemplate"; "allowFiltering": "allowFiltering"; "allowMultiSelection": "allowMultiSelection"; "changeOnBlur": "changeOnBlur"; "cssClass": "cssClass"; "delimiterChar": "delimiterChar"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "enabled": "enabled"; "fields": "fields"; "filterBarPlaceholder": "filterBarPlaceholder"; "filterType": "filterType"; "floatLabelType": "floatLabelType"; "footerTemplate": "footerTemplate"; "headerTemplate": "headerTemplate"; "htmlAttributes": "htmlAttributes"; "ignoreAccent": "ignoreAccent"; "ignoreCase": "ignoreCase"; "itemTemplate": "itemTemplate"; "locale": "locale"; "mode": "mode"; "noRecordsTemplate": "noRecordsTemplate"; "placeholder": "placeholder"; "popupHeight": "popupHeight"; "popupWidth": "popupWidth"; "readonly": "readonly"; "selectAllText": "selectAllText"; "showCheckBox": "showCheckBox"; "showClearButton": "showClearButton"; "showDropDownIcon": "showDropDownIcon"; "showSelectAll": "showSelectAll"; "sortOrder": "sortOrder"; "text": "text"; "treeSettings": "treeSettings"; "unSelectAllText": "unSelectAllText"; "value": "value"; "width": "width"; "zIndex": "zIndex"; }, { "actionFailure": "actionFailure"; "beforeOpen": "beforeOpen"; "blur": "blur"; "change": "change"; "close": "close"; "created": "created"; "dataBound": "dataBound"; "destroyed": "destroyed"; "filtering": "filtering"; "focus": "focus"; "keyPress": "keyPress"; "open": "open"; "select": "select"; "valueChange": "valueChange"; }, ["footerTemplate", "headerTemplate", "itemTemplate", "noRecordsTemplate", "actionFailureTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd250cmVlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkcm9wZG93bnRyZWUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIFJlbmRlcmVyMiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDb21wb25lbnRCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG5pbXBvcnQgeyBEcm9wRG93blRyZWUgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItZHJvcGRvd25zJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGlucHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCBvdXRwdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHR3b1dheXM6IHN0cmluZ1tdO1xuLyoqXG4qVGhlIERyb3BEb3duVHJlZSBjb21wb25lbnQgY29udGFpbnMgYSBsaXN0IG9mIHByZWRlZmluZWQgdmFsdWVzIGZyb20gd2hpY2ggeW91IGNhbiBjaG9vc2UgYSBzaW5nbGUgb3IgbXVsdGlwbGUgdmFsdWVzLlxuKmBgYGh0bWxcbio8ZWpzLWRyb3Bkb3dudHJlZT48L2Vqcy1kcm9wZG93bnRyZWU+XG4qYGBgXG4qL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRHJvcERvd25UcmVlQ29tcG9uZW50IGV4dGVuZHMgRHJvcERvd25UcmVlIGltcGxlbWVudHMgSUNvbXBvbmVudEJhc2Uge1xuICAgIHByaXZhdGUgbmdFbGU7XG4gICAgcHJpdmF0ZSBzcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIHByaXZhdGUgaW5qZWN0b3I7XG4gICAgZm9ybUNvbXBDb250ZXh0OiBhbnk7XG4gICAgZm9ybUNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgdmFsdWVDaGFuZ2U6IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRlbXBsYXRlIHRoYXQgcmVuZGVycyBhIGN1c3RvbWl6ZWQgZm9vdGVyIGNvbnRhaW5lciBhdCB0aGUgYm90dG9tIG9mIHRoZSBwb3AtdXAgbGlzdC5cbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgZm9vdGVyVGVtcGxhdGUgd2lsbCBiZSBudWxsIGFuZCB0aGVyZSB3aWxsIGJlIG5vIGZvb3RlciBjb250YWluZXIgZm9yIHRoZSBwb3AtdXAgbGlzdC5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgZm9vdGVyVGVtcGxhdGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRlbXBsYXRlIHRoYXQgcmVuZGVycyBhIGN1c3RvbWl6ZWQgaGVhZGVyIGNvbnRhaW5lciBhdCB0aGUgdG9wIG9mIHRoZSBwb3AtdXAgbGlzdC5cbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgaGVhZGVyVGVtcGxhdGUgd2lsbCBiZSBudWxsIGFuZCB0aGVyZSB3aWxsIGJlIG5vIGhlYWRlciBjb250YWluZXIgZm9yIHRoZSBwb3AtdXAgbGlzdC5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaGVhZGVyVGVtcGxhdGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgYSB0ZW1wbGF0ZSB0byByZW5kZXIgY3VzdG9taXplZCBjb250ZW50IGZvciBhbGwgdGhlIGl0ZW1zLlxuICAgICAqIElmIHRoZSAqKml0ZW1UZW1wbGF0ZSoqIHByb3BlcnR5IGlzIHNldCwgdGhlIHRlbXBsYXRlIGNvbnRlbnQgb3ZlcnJpZGVzIHRoZSBkaXNwbGF5ZWQgaXRlbSB0ZXh0LlxuICAgICAqIFRoZSBwcm9wZXJ0eSBhY2NlcHRzIFt0ZW1wbGF0ZSBzdHJpbmddKGh0dHA6Ly9lajIuc3luY2Z1c2lvbi5jb20vZG9jdW1lbnRhdGlvbi9iYXNlL3RlbXBsYXRlLWVuZ2luZS5odG1sKVxuICAgICAqIG9yIEhUTUwgZWxlbWVudCBJRCBob2xkaW5nIHRoZSBjb250ZW50LlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBpdGVtVGVtcGxhdGU6IGFueTtcbiAgICBub1JlY29yZHNUZW1wbGF0ZTogYW55O1xuICAgIGFjdGlvbkZhaWx1cmVUZW1wbGF0ZTogYW55O1xuICAgIHByaXZhdGUgc2tpcEZyb21FdmVudDtcbiAgICBjb25zdHJ1Y3RvcihuZ0VsZTogRWxlbWVudFJlZiwgc3JlbmRlcmVyOiBSZW5kZXJlcjIsIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIGluamVjdG9yOiBJbmplY3Rvcik7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShyZWdpc3RlckZ1bmN0aW9uOiAoXzogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChyZWdpc3RlckZ1bmN0aW9uOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICByZWdpc3RlckV2ZW50czogKGV2ZW50TGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG4gICAgYWRkVHdvV2F5OiAocHJvcExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuIl19